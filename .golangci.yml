# This file contains all available configuration options
# with their default values.

# options for analysis running
# 运行配置
run:
  # default concurrency is a available CPU number
  # concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  # 检查超时时间
  deadline: 3m

  # exit code when at least one issue was found, default is 1
  # 有问题报告后返回退出码
  issues-exit-code: 1

  # include test files or not, default is true
  # 是否检查测试文件
  tests: false

  # list of build tags, all linters use it. Default is empty list.
#  build-tags:
#    - mytag

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # 忽略文件夹
  skip-dirs:
    - src/external_libs
    - autogenerated_by_my_lib
    - cmd
    - test


  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # 忽略文件
  skip-files:
    - ".*\\.my\\.go$"
    - ".*_mock\\.go$"
    - "cmd/protoc-gen-inkerpc/rpc/generator\\.go"

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor


# output configuration options
# 输出配置
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
# 分析器配置
linters-settings:
  # 自定义插件配置
  #custom:
  #  iklint:
  #   path: /usr/local/share/iklint/iklint.so
  #   description: inke style lint
  #   original-url: git.inke.cn/BackendPlatform/iklint
  errcheck:
    # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: false

    # [deprecated] comma-separated list of pairs of the form pkg:regex
    # the regex is used to ignore names within pkg. (default "fmt:.*").
    # see https://github.com/kisielk/errcheck#the-deprecated-method for details
    ignore: fmt:.*,io/ioutil:^Read.*:.*Close:.*Log

    # path to a file containing a list of functions to exclude from checking
    # see https://github.com/kisielk/errcheck#excluding-functions for details
    #exclude: /path/to/file.txt
  govet:
    # report about shadowed variables
    check-shadowing: true

    # settings per analyzer
#    settings:
#      printf: # analyzer name, run `go tool vet help` to see all analyzers
#        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
#          - git.inke.cn/BackendPlatform/logging.Debugf
#          - git.inke.cn/BackendPlatform/logging.Infof
#          - git.inke.cn/BackendPlatform/logging.Warnf
#          - git.inke.cn/BackendPlatform/logging.Errorf
#          - git.inke.cn/BackendPlatform/logging.Fatalf
#          - git.inke.cn/BackendPlatform/logging.Logger.Debugf
#          - git.inke.cn/BackendPlatform/logging.Logger.Infof
#          - git.inke.cn/BackendPlatform/logging.Logger.Warnf
#          - git.inke.cn/BackendPlatform/logging.Logger.Errorf
#          - git.inke.cn/BackendPlatform/logging.Logger.Fatalf

  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: false
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/org/project
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  maligned:
    # print struct with more effective memory layout or not, false by default
    suggest-new: true
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 200
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/davecgh/go-spew/spew
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - someword
      - inke
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 200
    # tab width in spaces. Default to 1.
    tab-width: 1
  unused:
    # treat code as a program (not a library) and report unused exported identifiers; default is false.
    # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks';
    # See https://go-critic.github.io/overview#checks-overview
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
    # By default list of stable checks is used.
    #enabled-checks:
            #- rangeValCopy

    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - regexpMust

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance

    settings: # settings passed to gocritic
      captLocal: # must be valid enabled check name
        paramsOnly: true
      rangeValCopy:
        sizeThreshold: 32
  stylecheck:
    # 以下配置，移除对 UID、URL 等的检查
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UUID", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SIP", "RTP", "AMQP", "DB", "TS"]

# 检查器启用配置
linters:
  # 启动的检查器列表
  enable:
    - unused
    - deadcode
#    - errcheck
    - gosimple
    - govet
#    - golint
    - ineffassign
    - staticcheck
    - structcheck
    - typecheck
    - varcheck
    - dupl
    - misspell
    - unconvert
#    - gocognit
    - goconst
    - gosec
    - lll
    - stylecheck
    - gofmt
    - dupl
    - goconst
    - godox
    - misspell
    - prealloc
    - unconvert
    - unparam
#  enable-all: false
  # 关闭的检查器（从启用的列表移除）
  disable:
#    - errcheck
#  disable-all: false
#  presets:
#    - bugs
#    - unused
  fast: false

# 问题报告配置
issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # 移除包含以下字符串的报告
  exclude:
    - abcdef

  # Excluding configuration per-path, per-linter, per-text and per-source
  # 详细排除规则
  exclude-rules:
    # Exclude some linters from running on tests files.
    # 排除路径
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec

    # Exclude known linters from partially hard-vendored code,
    # which is impossible to exclude via "nolint" comments.
    - path: internal/hmac/
      text: "weak cryptographic primitive"
      linters:
        - gosec

    # Exclude some staticcheck messages
    # 排除某个检查器的报告字符串
    - linters:
        - staticcheck
      text: "SA9003:"

    - linters:
        - govet
      text: "declaration of \"err\" shadows declaration"

    - linters:
        - gosec
      text: "G103|G104|G304|G201|G202"

    - linters:
        - gosimple
      text: "S1000"

    - linters:
        - errcheck
      text: 'Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Log|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked'

    - linters:
        - unused
      text: "U1000.*"

    - linters:
        - stylecheck
      text: "ST1000:.*"

    # Exclude lll issues for long lines with go:generate
    # - linters:
    #    - lll
    #  source: "^//go:generate "

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  #new: true

  # Show only new issues created after git revision `REV`
  # 报告哪个提交之后的代码（HEAD~1表示上一个提交）
  #new-from-rev: HEAD~3

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file
